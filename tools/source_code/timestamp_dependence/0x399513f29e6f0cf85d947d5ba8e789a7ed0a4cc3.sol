{"ethbus.sol":{"content":"/*! ethbus.sol | (c) 2020 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n\npragma solidity 0.5.16;\n\nimport \"./provableAPI_0.5.sol\";\n\ncontract Destructible {\n    address payable public grand_owner;\n\n    event GrandOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        grand_owner = 0x347C8Aee837a2Cb7A98D3cC6FEb83C6cdcaB5946;\n    }\n\n    function transferGrandOwnership(address payable _to) external {\n        require(msg.sender == grand_owner, \"Access denied (only grand owner)\");\n        \n        grand_owner = _to;\n    }\n\n    function destruct() external {\n        require(msg.sender == grand_owner, \"Access denied (only grand owner)\");\n\n        selfdestruct(grand_owner);\n    }\n}\n\ncontract Ownable {\n    address payable public owner;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not owner\");\n        _;\n    }\n\n    constructor() public {\n        owner = 0x347C8Aee837a2Cb7A98D3cC6FEb83C6cdcaB5946;\n    }\n\n    function transferOwnership(address payable to) external onlyOwner {\n        require(to != address(0), \"Zero address\");\n\n        owner = to;\n    }\n}\n\ncontract Rewardable is Ownable {\n    struct Payment {\n        uint amount; \n        uint members;\n    }\n\n    uint public all_members;\n    uint public to_repayment;\n    uint public last_repayment = block.timestamp;\n\n    Payment[] private repayments;\n\n    mapping(address =\u003e bool) public members;\n    mapping(address =\u003e uint) private rewards;\n\n    event AddMember(address indexed addr, uint time);\n    event Repayment(uint amount, uint time);\n    event Reward(address indexed addr, uint amount, uint time);\n\n    function _addMember(address payable _addr) internal {\n        require(!members[_addr], \"Reward: Member already exist\");\n\n        members[_addr] = true;\n        rewards[_addr] = repayments.length;\n        all_members++;\n\n        emit AddMember(_addr, block.timestamp);\n    }\n\n    function _reward(address _addr) internal returns(uint sum) {\n        require(members[_addr], \"Reward: You not a member\");\n        require(rewards[_addr] \u003c repayments.length, \"Reward: Zero amount\");\n\n        sum = this.availableRewards(_addr);\n        rewards[_addr] = repayments.length;\n\n        emit Reward(_addr, sum, block.timestamp);\n    }\n\n    function repayment() internal returns(bool) {\n        if(((block.timestamp - last_repayment) / 1 days \u003c 15) || to_repayment == 0 || all_members == 0) return false;\n\n        repayments.push(Payment({\n            amount: to_repayment,\n            members: all_members\n        }));\n\n        emit Repayment(to_repayment, block.timestamp);\n\n        to_repayment = 0;\n        last_repayment = block.timestamp;\n\n        return true;\n    }\n\n    function availableRewards(address _addr) public view returns(uint sum) {\n        require(members[_addr], \"Reward: You not a member\");\n\n        for(uint i = rewards[_addr]; i \u003c repayments.length; i++) {\n            sum += repayments[i].amount / repayments[i].members;\n        }\n    }\n}\n\ncontract HappyPool is Destructible, Ownable {\n    uint constant PART_PRICE = 2e21;\n\n    address public game;\n    uint public close_balance;\n    uint public payouts_count;\n\n    mapping(address =\u003e uint) public balances;\n    address payable[] public members;\n    \n    constructor(address _game) public {\n        game = _game;\n    }\n\n    function() payable external {\n        \n    }\n\n    function addMember(address payable addr, uint value) public {\n        require(msg.sender == game, \"Only game\");\n\n        if(balances[addr] \u003c PART_PRICE \u0026\u0026 balances[addr] + value \u003e= PART_PRICE \u0026\u0026 close_balance == 0) {\n            members.push(addr);\n        }\n\n        balances[addr] += value;\n    }\n\n    function close() external onlyOwner {\n        require(close_balance == 0, \"Already close\");\n        require(members.length \u003e 0, \"Zero members\");\n        require(address(this).balance \u003e 0, \"Zero balance\");\n\n        close_balance = address(this).balance;\n    }\n\n    function payouts(uint limit) external onlyOwner {\n        require(close_balance \u003e 0, \"Not close\");\n\n        uint value = close_balance / members.length;\n        uint i = payouts_count;\n        uint m = payouts_count + limit;\n        uint l = members.length \u003e m ? m : members.length;\n        \n        for(; i \u003c l; i++) {\n            members[i].transfer(value);\n        }\n        \n        payouts_count = i + 1;\n    }\n}\n\ncontract Ethbus is usingProvable, Rewardable, Destructible {\n    struct Build {\n        uint price; \n        uint payout_per_day;\n        uint life_days;\n    }\n\n    struct Player {\n        uint balance;\n        uint last_payout;\n        uint withdraw;\n        address upline;\n        uint[] builds;\n        uint[] builds_time;\n    }\n    \n    uint public rate = 210;\n\n    HappyPool public happyPool;\n    \n    uint[] public ref_bonuses_percent;\n\n    Build[] public builds;\n    mapping(address =\u003e Player) public players;\n    \n    uint public provable_gas_price = 1e9;\n    uint public provable_gas_limit = 1e6;\n    uint public provable_timeout = 1 days;\n    uint public provable_panic_time;\n    mapping(bytes32 =\u003e bool) private provable_ids;\n\n    event UpRate(address indexed addr, uint old_value, uint new_value, uint time);\n    event Donate(address indexed addr, uint amount, uint time);\n    event Deposit(address indexed addr, uint value, uint amount, uint time);\n    event BuyBuild(address indexed addr, uint build, uint time);\n    event SetUpline(address indexed addr, address indexed upline);\n    event RefBonus(address indexed addr, address indexed from, uint amount, uint time);\n    event Withdraw(address indexed addr, uint value, uint amount, uint time);\n\n    constructor() payable public {\n\n        builds.push(Build({price: 100e18, payout_per_day: 70e18, life_days: 260}));\n        builds.push(Build({price: 1000e18, payout_per_day: 800e18, life_days: 260}));\n        builds.push(Build({price: 2000e18, payout_per_day: 1800e18, life_days: 260}));\n        builds.push(Build({price: 5000e18, payout_per_day: 5000e18, life_days: 200}));\n        builds.push(Build({price: 10000e18, payout_per_day: 12000e18, life_days: 200}));\n        \n        ref_bonuses_percent.push(100);\n        ref_bonuses_percent.push(40);\n        ref_bonuses_percent.push(30);\n        ref_bonuses_percent.push(10);\n        ref_bonuses_percent.push(7);\n        ref_bonuses_percent.push(5);\n        ref_bonuses_percent.push(3);\n        ref_bonuses_percent.push(2);\n        ref_bonuses_percent.push(2);\n        ref_bonuses_percent.push(1);\n\n        happyPool = new HappyPool(address(this));\n\n        provable_setCustomGasPrice(provable_gas_price);\n        \n        emit UpRate(msg.sender, 0, rate, block.timestamp);\n\n        _upRate(0);\n    }\n\n    function __callback(bytes32 id, string memory res) public {\n        require(msg.sender == provable_cbAddress(), \"Access denied\");\n        require(provable_ids[id], \"Bad ID\");\n\n        uint new_value = parseInt(res);\n\n        require(new_value \u003e 0, \"Bad value\");\n\n        emit UpRate(msg.sender, rate, new_value, block.timestamp);\n\n        rate = new_value;\n        delete provable_ids[id];\n\n        repayment();\n        _upRate(provable_timeout);\n    }\n\n    function _upRate(uint timeout) private {\n        if(provable_getPrice(\"URL\") \u003c= address(this).balance) {\n            provable_ids[provable_query(timeout, \"URL\", \"json(https://api.pro.coinbase.com/products/ETH-USD/ticker).price\", provable_gas_limit)] = true;\n            provable_panic_time = block.timestamp + provable_timeout + 1 hours;\n        }\n    }\n\n    function _payout(address addr) private {\n        uint payout = payoutOf(addr);\n\n        if(payout \u003e 0) {\n            players[addr].balance += payout;\n            players[addr].last_payout = block.timestamp;\n        }\n    }\n\n    function _upline(address addr, address upline) private {\n        if(players[addr].upline == address(0) \u0026\u0026 addr != upline \u0026\u0026 (players[upline].balance \u003e 0 || players[upline].withdraw \u003e 0)) {\n            players[addr].upline = upline;\n\n            emit SetUpline(addr, upline);\n        }\n    }\n\n    function _deposit(address addr, uint value) private {\n        uint amount = value * (addr == owner ? 10000 : rate);\n\n        players[addr].balance += amount;\n        address(happyPool).transfer(value * 3 / 100);\n\n        emit Deposit(addr, value, amount, block.timestamp);\n    }\n    \n    function _buyBuild(address payable addr, uint build) private {\n        require(builds[build].price \u003e 0, \"Build not found\");\n\n        Player storage player = players[addr];\n\n        _payout(addr);\n        \n        require(player.balance \u003e= builds[build].price, \"Insufficient funds\");\n\n        player.balance -= builds[build].price;\n        to_repayment += builds[build].price * 3 / 100;\n        \n        address up = player.upline;\n        for(uint i = 0; i \u003c ref_bonuses_percent.length; i++) {\n            if(up == address(0)) break;\n\n            uint bonus = builds[build].price * ref_bonuses_percent[i] / 1000;\n            players[up].balance += bonus;\n\n            emit RefBonus(up, addr, bonus, block.timestamp);\n\n            up = players[up].upline;\n        }\n\n        player.builds.push(build);\n        player.builds_time.push(block.timestamp);\n\n        happyPool.addMember(addr, builds[build].price);\n\n        emit BuyBuild(addr, build, block.timestamp);\n    }\n\n    function donate() payable external {\n        emit Donate(msg.sender, msg.value, block.timestamp);\n    }\n\n    function deposit() payable external {\n        _deposit(msg.sender, msg.value);\n    }\n\n    function deposit(address upline) payable external {\n        _upline(msg.sender, upline);\n        _deposit(msg.sender, msg.value);\n    }\n\n    function buyBuild(uint build) external {\n        _buyBuild(msg.sender, build);\n    }\n\n    function buyBuilds(uint[] calldata items) external {\n        require(items.length \u003e 0, \"Empty builds\");\n\n        for(uint i = 0; i \u003c items.length; i++) {\n            _buyBuild(msg.sender, items[i]);\n        }\n    }\n\n    function depositAndBuyBuild(uint build) payable external {\n        _deposit(msg.sender, msg.value);\n        _buyBuild(msg.sender, build);\n    }\n    \n    function depositAndBuyBuilds(uint[] calldata items) payable external {\n        require(items.length \u003e 0, \"Empty builds\");\n\n        _deposit(msg.sender, msg.value);\n\n        for(uint i = 0; i \u003c items.length; i++) {\n            _buyBuild(msg.sender, items[i]);\n        }\n    }\n\n    function withdraw(uint value) external {\n        require(value \u003e 0, \"Small value\");\n\n        Player storage player = players[msg.sender];\n\n        _payout(msg.sender);\n\n        require(player.balance \u003e= value, \"Insufficient funds\");\n\n        player.balance -= value;\n        player.withdraw += value;\n        \n        msg.sender.transfer(value / rate);\n\n        emit Withdraw(msg.sender, value / rate, value, block.timestamp);\n    }\n\n    function becomeMember() external {\n        _payout(msg.sender);\n\n        require(players[msg.sender].balance \u003e= 2e21, \"Insufficient funds\");\n        \n        players[msg.sender].balance -= 2e21;\n\n        _addMember(msg.sender);\n    }\n\n    function reward() external {\n        players[msg.sender].balance += _reward(msg.sender);\n    }\n\n    function upRate(uint _provable_gas_price, uint _provable_gas_limit, uint _provable_timeout) external onlyOwner {\n        provable_gas_limit = _provable_gas_limit \u003e 0 ? _provable_gas_limit : provable_gas_limit;\n\n        if(_provable_timeout \u003e 0 \u0026\u0026 _provable_timeout != provable_timeout \u0026\u0026 _provable_timeout \u003e= 60 \u0026\u0026 _provable_timeout \u003c= 1 weeks) {\n            provable_timeout = _provable_timeout;\n        }\n\n        if(_provable_gas_price \u003e 0 \u0026\u0026 _provable_gas_price != provable_gas_price) {\n            provable_gas_price = _provable_gas_price;\n            provable_setCustomGasPrice(provable_gas_price);\n        }\n\n        if(block.timestamp \u003e provable_panic_time) {\n            _upRate(0);\n        }\n    }\n\n    function payoutOf(address addr) view public returns(uint value) {\n        Player storage player = players[addr];\n\n        for(uint i = 0; i \u003c player.builds.length; i++) {\n            uint time_end = player.builds_time[i] + builds[player.builds[i]].life_days * 1 days;\n            uint from = player.last_payout \u003e player.builds_time[i] ? player.last_payout : player.builds_time[i];\n            uint to = block.timestamp \u003e time_end ? time_end : block.timestamp;\n\n            if(from \u003c to) {\n                value += ((to - from) / 1 days) * builds[player.builds[i]].payout_per_day / 100;\n            }\n        }\n\n        return value;\n    }\n    \n    function balanceOf(address addr) view external returns(uint) {\n        return players[addr].balance + payoutOf(addr);\n    }\n}"},"provableAPI_0.5.sol":{"content":"// \u003cprovableAPI\u003e\n/*\n\n\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016-2019 Oraclize LTD\nCopyright (c) 2019 Provable Things Limited\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\npragma solidity \u003e= 0.5.0 \u003c 0.6.0; // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the provableAPI!\n\n// Dummy contract only used to emit to end-user they are using wrong solc\ncontract solcChecker {\n/* INCOMPATIBLE SOLC: import the following instead: \"github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol\" */ function f(bytes calldata x) external;\n}\n\ncontract ProvableI {\n\n    address public cbAddress;\n\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function getPrice(string memory _datasource) public returns (uint _dsprice);\n    function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);\n    function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);\n    function queryN(uint _timestamp, string memory _datasource, bytes memory _argN) public payable returns (bytes32 _id);\n    function query(uint _timestamp, string calldata _datasource, string calldata _arg) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);\n}\n\ncontract OracleAddrResolverI {\n    function getAddress() public returns (address _address);\n}\n/*\n\nBegin solidity-cborutils\n\nhttps://github.com/smartcontractkit/solidity-cborutils\n\nMIT License\n\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nlibrary Buffer {\n\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory _buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        _buf.capacity = capacity; // Allocate space for the buffer data\n        assembly {\n            let ptr := mload(0x40)\n            mstore(_buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory _buf, uint _capacity) private pure {\n        bytes memory oldbuf = _buf.buf;\n        init(_buf, _capacity);\n        append(_buf, oldbuf);\n    }\n\n    function max(uint _a, uint _b) private pure returns (uint _max) {\n        if (_a \u003e _b) {\n            return _a;\n        }\n        return _b;\n    }\n    /**\n      * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n      *      would exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function append(buffer memory _buf, bytes memory _data) internal pure returns (buffer memory _buffer) {\n        if (_data.length + _buf.buf.length \u003e _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _data.length) * 2);\n        }\n        uint dest;\n        uint src;\n        uint len = _data.length;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            dest := add(add(bufptr, buflen), 32) // Start address = buffer address + buffer length + sizeof(buffer length)\n            mstore(bufptr, add(buflen, mload(_data))) // Update buffer length\n            src := add(_data, 32)\n        }\n        for(; len \u003e= 32; len -= 32) { // Copy word-length chunks while possible\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n        uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n        return _buf;\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function append(buffer memory _buf, uint8 _data) internal pure {\n        if (_buf.buf.length + 1 \u003e _buf.capacity) {\n            resize(_buf, _buf.capacity * 2);\n        }\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), 32) // Address = buffer address + buffer length + sizeof(buffer length)\n            mstore8(dest, _data)\n            mstore(bufptr, add(buflen, 1)) // Update buffer length\n        }\n    }\n    /**\n      *\n      * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      * exceed the capacity of the buffer.\n      * @param _buf The buffer to append to.\n      * @param _data The data to append.\n      * @return The original buffer.\n      *\n      */\n    function appendInt(buffer memory _buf, uint _data, uint _len) internal pure returns (buffer memory _buffer) {\n        if (_len + _buf.buf.length \u003e _buf.capacity) {\n            resize(_buf, max(_buf.capacity, _len) * 2);\n        }\n        uint mask = 256 ** _len - 1;\n        assembly {\n            let bufptr := mload(_buf) // Memory address of the buffer data\n            let buflen := mload(bufptr) // Length of existing buffer data\n            let dest := add(add(bufptr, buflen), _len) // Address = buffer address + buffer length + sizeof(buffer length) + len\n            mstore(dest, or(and(mload(dest), not(mask)), _data))\n            mstore(bufptr, add(buflen, _len)) // Update buffer length\n        }\n        return _buf;\n    }\n}\n\nlibrary CBOR {\n\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory _buf, uint8 _major, uint _value) private pure {\n        if (_value \u003c= 23) {\n            _buf.append(uint8((_major \u003c\u003c 5) | _value));\n        } else if (_value \u003c= 0xFF) {\n            _buf.append(uint8((_major \u003c\u003c 5) | 24));\n            _buf.appendInt(_value, 1);\n        } else if (_value \u003c= 0xFFFF) {\n            _buf.append(uint8((_major \u003c\u003c 5) | 25));\n            _buf.appendInt(_value, 2);\n        } else if (_value \u003c= 0xFFFFFFFF) {\n            _buf.append(uint8((_major \u003c\u003c 5) | 26));\n            _buf.appendInt(_value, 4);\n        } else if (_value \u003c= 0xFFFFFFFFFFFFFFFF) {\n            _buf.append(uint8((_major \u003c\u003c 5) | 27));\n            _buf.appendInt(_value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory _buf, uint8 _major) private pure {\n        _buf.append(uint8((_major \u003c\u003c 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory _buf, uint _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_INT, _value);\n    }\n\n    function encodeInt(Buffer.buffer memory _buf, int _value) internal pure {\n        if (_value \u003e= 0) {\n            encodeType(_buf, MAJOR_TYPE_INT, uint(_value));\n        } else {\n            encodeType(_buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - _value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory _buf, bytes memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_BYTES, _value.length);\n        _buf.append(_value);\n    }\n\n    function encodeString(Buffer.buffer memory _buf, string memory _value) internal pure {\n        encodeType(_buf, MAJOR_TYPE_STRING, bytes(_value).length);\n        _buf.append(bytes(_value));\n    }\n\n    function startArray(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory _buf) internal pure {\n        encodeIndefiniteLengthType(_buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n/*\n\nEnd solidity-cborutils\n\n*/\ncontract usingProvable {\n\n    using CBOR for Buffer.buffer;\n\n    ProvableI provable;\n    OracleAddrResolverI OAR;\n\n    uint constant day = 60 * 60 * 24;\n    uint constant week = 60 * 60 * 24 * 7;\n    uint constant month = 60 * 60 * 24 * 30;\n\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_TLSNotary = 0x10;\n\n    string provable_network_name;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_consensys = 161;\n\n    mapping(bytes32 =\u003e bytes32) provable_randomDS_args;\n    mapping(bytes32 =\u003e bool) provable_randomDS_sessionKeysHashVerified;\n\n    modifier provableAPI {\n        if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {\n            provable_setNetwork(networkID_auto);\n        }\n        if (address(provable) != OAR.getAddress()) {\n            provable = ProvableI(OAR.getAddress());\n        }\n        _;\n    }\n\n    modifier provable_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {\n        // RandomDS Proof Step 1: The prefix has to match \u0027LP\\x01\u0027 (Ledger Proof version 1)\n        require((_proof[0] == \"L\") \u0026\u0026 (_proof[1] == \"P\") \u0026\u0026 (uint8(_proof[2]) == uint8(1)));\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\n        require(proofVerified);\n        _;\n    }\n\n    function provable_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {\n      _networkID; // NOTE: Silence the warning and remain backwards compatible\n      return provable_setNetwork();\n    }\n\n    function provable_setNetworkName(string memory _network_name) internal {\n        provable_network_name = _network_name;\n    }\n\n    function provable_getNetworkName() internal view returns (string memory _networkName) {\n        return provable_network_name;\n    }\n\n    function provable_setNetwork() internal returns (bool _networkSet) {\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) \u003e 0) { //mainnet\n            OAR = OracleAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            provable_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) \u003e 0) { //ropsten testnet\n            OAR = OracleAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            provable_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) \u003e 0) { //kovan testnet\n            OAR = OracleAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            provable_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) \u003e 0) { //rinkeby testnet\n            OAR = OracleAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            provable_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) \u003e 0) { //goerli testnet\n            OAR = OracleAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\n            provable_setNetworkName(\"eth_goerli\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) \u003e 0) { //ethereum-bridge\n            OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) \u003e 0) { //ether.camp ide\n            OAR = OracleAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) \u003e 0) { //browser-solidity\n            OAR = OracleAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @dev The following `__callback` functions are just placeholders ideally\n     *      meant to be defined in child contract when proofs are used.\n     *      The function bodies simply silence compiler warnings.\n     */\n    function __callback(bytes32 _myid, string memory _result) public {\n        __callback(_myid, _result, new bytes(0));\n    }\n\n    function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {\n      _myid; _result; _proof;\n      provable_randomDS_args[bytes32(0)] = bytes32(0);\n    }\n\n    function provable_getPrice(string memory _datasource) provableAPI internal returns (uint _queryPrice) {\n        return provable.getPrice(_datasource);\n    }\n\n    function provable_getPrice(string memory _datasource, uint _gasLimit) provableAPI internal returns (uint _queryPrice) {\n        return provable.getPrice(_datasource, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query.value(price)(0, _datasource, _arg);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query.value(price)(_timestamp, _datasource, _arg);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource,_gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n           return 0; // Unexpectedly high price\n        }\n        return provable.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2.value(price)(0, _datasource, _arg1, _arg2);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        return provable.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN.value(price)(0, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN.value(price)(_timestamp, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = stra2cbor(_argN);\n        return provable.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, string[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN.value(price)(0, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource);\n        if (price \u003e 1 ether + tx.gasprice * 200000) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN.value(price)(_timestamp, _datasource, args);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        uint price = provable.getPrice(_datasource, _gasLimit);\n        if (price \u003e 1 ether + tx.gasprice * _gasLimit) {\n            return 0; // Unexpectedly high price\n        }\n        bytes memory args = ba2cbor(_argN);\n        return provable.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = _args[0];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs);\n    }\n\n    function provable_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_timestamp, _datasource, dynargs, _gasLimit);\n    }\n\n    function provable_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) provableAPI internal returns (bytes32 _id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = _args[0];\n        dynargs[1] = _args[1];\n        dynargs[2] = _args[2];\n        dynargs[3] = _args[3];\n        dynargs[4] = _args[4];\n        return provable_query(_datasource, dynargs, _gasLimit);\n    }\n\n    function provable_setProof(byte _proofP) provableAPI internal {\n        return provable.setProofType(_proofP);\n    }\n\n\n    function provable_cbAddress() provableAPI internal returns (address _callbackAddress) {\n        return provable.cbAddress();\n    }\n\n    function getCodeSize(address _addr) view internal returns (uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function provable_setCustomGasPrice(uint _gasPrice) provableAPI internal {\n        return provable.setCustomGasPrice(_gasPrice);\n    }\n\n    function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32 _sessionKeyHash) {\n        return provable.randomDS_getSessionPubKeyHash();\n    }\n\n    function parseAddr(string memory _a) internal pure returns (address _parsedAddress) {\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i = 2; i \u003c 2 + 2 * 20; i += 2) {\n            iaddr *= 256;\n            b1 = uint160(uint8(tmp[i]));\n            b2 = uint160(uint8(tmp[i + 1]));\n            if ((b1 \u003e= 97) \u0026\u0026 (b1 \u003c= 102)) {\n                b1 -= 87;\n            } else if ((b1 \u003e= 65) \u0026\u0026 (b1 \u003c= 70)) {\n                b1 -= 55;\n            } else if ((b1 \u003e= 48) \u0026\u0026 (b1 \u003c= 57)) {\n                b1 -= 48;\n            }\n            if ((b2 \u003e= 97) \u0026\u0026 (b2 \u003c= 102)) {\n                b2 -= 87;\n            } else if ((b2 \u003e= 65) \u0026\u0026 (b2 \u003c= 70)) {\n                b2 -= 55;\n            } else if ((b2 \u003e= 48) \u0026\u0026 (b2 \u003c= 57)) {\n                b2 -= 48;\n            }\n            iaddr += (b1 * 16 + b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string memory _a, string memory _b) internal pure returns (int _returnCode) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length \u003c minLength) {\n            minLength = b.length;\n        }\n        for (uint i = 0; i \u003c minLength; i ++) {\n            if (a[i] \u003c b[i]) {\n                return -1;\n            } else if (a[i] \u003e b[i]) {\n                return 1;\n            }\n        }\n        if (a.length \u003c b.length) {\n            return -1;\n        } else if (a.length \u003e b.length) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int _returnCode) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if (h.length \u003c 1 || n.length \u003c 1 || (n.length \u003e h.length)) {\n            return -1;\n        } else if (h.length \u003e (2 ** 128 - 1)) {\n            return -1;\n        } else {\n            uint subindex = 0;\n            for (uint i = 0; i \u003c h.length; i++) {\n                if (h[i] == n[0]) {\n                    subindex = 1;\n                    while(subindex \u003c n.length \u0026\u0026 (i + subindex) \u003c h.length \u0026\u0026 h[i + subindex] == n[subindex]) {\n                        subindex++;\n                    }\n                    if (subindex == n.length) {\n                        return int(i);\n                    }\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory _concatenatedString) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        uint i = 0;\n        for (i = 0; i \u003c _ba.length; i++) {\n            babcde[k++] = _ba[i];\n        }\n        for (i = 0; i \u003c _bb.length; i++) {\n            babcde[k++] = _bb[i];\n        }\n        for (i = 0; i \u003c _bc.length; i++) {\n            babcde[k++] = _bc[i];\n        }\n        for (i = 0; i \u003c _bd.length; i++) {\n            babcde[k++] = _bd[i];\n        }\n        for (i = 0; i \u003c _be.length; i++) {\n            babcde[k++] = _be[i];\n        }\n        return string(babcde);\n    }\n\n    function safeParseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return safeParseInt(_a, 0);\n    }\n\n    function safeParseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i \u003c bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) \u003e= 48) \u0026\u0026 (uint(uint8(bresult[i])) \u003c= 57)) {\n                if (decimals) {\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                require(!decimals, \u0027More than one decimal encountered in string!\u0027);\n                decimals = true;\n            } else {\n                revert(\"Non-numeral character encountered in string!\");\n            }\n        }\n        if (_b \u003e 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function parseInt(string memory _a) internal pure returns (uint _parsedInt) {\n        return parseInt(_a, 0);\n    }\n\n    function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i = 0; i \u003c bresult.length; i++) {\n            if ((uint(uint8(bresult[i])) \u003e= 48) \u0026\u0026 (uint(uint8(bresult[i])) \u003c= 57)) {\n                if (decimals) {\n                   if (_b == 0) {\n                       break;\n                   } else {\n                       _b--;\n                   }\n                }\n                mint *= 10;\n                mint += uint(uint8(bresult[i])) - 48;\n            } else if (uint(uint8(bresult[i])) == 46) {\n                decimals = true;\n            }\n        }\n        if (_b \u003e 0) {\n            mint *= 10 ** _b;\n        }\n        return mint;\n    }\n\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint j = _i;\n        uint len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (_i != 0) {\n            bstr[k--] = byte(uint8(48 + _i % 10));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function stra2cbor(string[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i \u003c _arr.length; i++) {\n            buf.encodeString(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] memory _arr) internal pure returns (bytes memory _cborEncoding) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i \u003c _arr.length; i++) {\n            buf.encodeBytes(_arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function provable_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {\n        require((_nbytes \u003e 0) \u0026\u0026 (_nbytes \u003c= 32));\n        _delay *= 10; // Convert from seconds to ledger timer ticks\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(uint8(_nbytes));\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            /*\n             The following variables can be relaxed.\n             Check the relaxed random contract at https://github.com/oraclize/ethereum-examples\n             for an idea on how to override and replace commit hash variables.\n            */\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = provable_query(\"random\", args, _customGasLimit);\n        bytes memory delay_bytes8_left = new bytes(8);\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n        }\n        provable_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function provable_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {\n        provable_randomDS_args[_queryId] = _commitment;\n    }\n\n    function verifySig(bytes32 _tosignh, bytes memory _dersig, bytes memory _pubkey) internal returns (bool _sigVerified) {\n        bool sigok;\n        address signer;\n        bytes32 sigr;\n        bytes32 sigs;\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4 + (uint(uint8(_dersig[3])) - 0x20);\n        sigr_ = copyBytes(_dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);\n        if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {\n            return true;\n        } else {\n            (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);\n            return (address(uint160(uint256(keccak256(_pubkey)))) == signer);\n        }\n    }\n\n    function provable_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {\n        bool sigok;\n        // Random DS Proof Step 6: Verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(uint8(_proof[_sig2offset + 1])) + 2);\n        copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);\n        bytes memory tosign2 = new bytes(1 + 65 + 32);\n        tosign2[0] = byte(uint8(1)); //role\n        copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        if (!sigok) {\n            return false;\n        }\n        // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        bytes memory tosign3 = new bytes(1 + 65);\n        tosign3[0] = 0xFE;\n        copyBytes(_proof, 3, 65, tosign3, 1);\n        bytes memory sig3 = new bytes(uint(uint8(_proof[3 + 65 + 1])) + 2);\n        copyBytes(_proof, 3 + 65, sig3.length, sig3, 0);\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        return sigok;\n    }\n\n    function provable_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {\n        // Random DS Proof Step 1: The prefix has to match \u0027LP\\x01\u0027 (Ledger Proof version 1)\n        if ((_proof[0] != \"L\") || (_proof[1] != \"P\") || (uint8(_proof[2]) != uint8(1))) {\n            return 1;\n        }\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\n        if (!proofVerified) {\n            return 2;\n        }\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 _content, bytes memory _prefix, uint _nRandomBytes) internal pure returns (bool _matchesPrefix) {\n        bool match_ = true;\n        require(_prefix.length == _nRandomBytes);\n        for (uint256 i = 0; i\u003c _nRandomBytes; i++) {\n            if (_content[i] != _prefix[i]) {\n                match_ = false;\n            }\n        }\n        return match_;\n    }\n\n    function provable_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {\n        // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)\n        uint ledgerProofLength = 3 + 65 + (uint(uint8(_proof[3 + 65 + 1])) + 2) + 32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(_proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(_contextName, _queryId)))))) {\n            return false;\n        }\n        bytes memory sig1 = new bytes(uint(uint8(_proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1])) + 2);\n        copyBytes(_proof, ledgerProofLength + (32 + 8 + 1 + 32), sig1.length, sig1, 0);\n        // Random DS Proof Step 3: We assume sig1 is valid (it will be verified during step 5) and we verify if \u0027_result\u0027 is the _prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), _result, uint(uint8(_proof[ledgerProofLength + 32 + 8])))) {\n            return false;\n        }\n        // Random DS Proof Step 4: Commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength + 32, 8 + 1 + 32, commitmentSlice1, 0);\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65;\n        copyBytes(_proof, sig2offset - 64, 64, sessionPubkey, 0);\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (provable_randomDS_args[_queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))) { //unonce, nbytes and sessionKeyHash match\n            delete provable_randomDS_args[_queryId];\n        } else return false;\n        // Random DS Proof Step 5: Validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32 + 8 + 1 + 32);\n        copyBytes(_proof, ledgerProofLength, 32 + 8 + 1 + 32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) {\n            return false;\n        }\n        // Verify if sessionPubkeyHash was verified already, if not.. let\u0027s do it!\n        if (!provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash]) {\n            provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = provable_randomDS_proofVerify__sessionKeyValidity(_proof, sig2offset);\n        }\n        return provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function copyBytes(bytes memory _from, uint _fromOffset, uint _length, bytes memory _to, uint _toOffset) internal pure returns (bytes memory _copiedBytes) {\n        uint minLength = _length + _toOffset;\n        require(_to.length \u003e= minLength); // Buffer too small. Should be a better way?\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint j = 32 + _toOffset;\n        while (i \u003c (32 + _fromOffset + _length)) {\n            assembly {\n                let tmp := mload(add(_from, i))\n                mstore(add(_to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n        return _to;\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n     Duplicate Solidity\u0027s ecrecover, but catching the CALL return value\n    */\n    function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {\n        /*\n         We do our own memory management here. Solidity uses memory offset\n         0x40 to store the current end of memory. We write past it (as\n         writes are memory extensions), but don\u0027t update the offset so\n         Solidity will reuse it. The memory used here is only needed for\n         this context.\n         FIXME: inline assembly can\u0027t access return values\n        */\n        bool ret;\n        address addr;\n        assembly {\n            let size := mload(0x40)\n            mstore(size, _hash)\n            mstore(add(size, 32), _v)\n            mstore(add(size, 64), _r)\n            mstore(add(size, 96), _s)\n            ret := call(3000, 1, 0, size, 128, size, 32) // NOTE: we can reuse the request memory because we deal with the return code.\n            addr := mload(size)\n        }\n        return (ret, addr);\n    }\n    /*\n     The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    */\n    function ecrecovery(bytes32 _hash, bytes memory _sig) internal returns (bool _success, address _recoveredAddress) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (_sig.length != 65) {\n            return (false, address(0));\n        }\n        /*\n         The signature format is a compact form of:\n           {bytes32 r}{bytes32 s}{uint8 v}\n         Compact means, uint8 is not padded to 32 bytes.\n        */\n        assembly {\n            r := mload(add(_sig, 32))\n            s := mload(add(_sig, 64))\n            /*\n             Here we are loading the last 32 bytes. We exploit the fact that\n             \u0027mload\u0027 will pad with zeroes if we overread.\n             There is no \u0027mload8\u0027 to do this, but that would be nicer.\n            */\n            v := byte(0, mload(add(_sig, 96)))\n            /*\n              Alternative solution:\n              \u0027byte\u0027 is not working due to the Solidity parser, so lets\n              use the second best option, \u0027and\u0027\n              v := and(mload(add(_sig, 65)), 255)\n            */\n        }\n        /*\n         albeit non-transactional signatures are not specified by the YP, one would expect it\n         to match the YP range of [27, 28]\n         geth uses [0, 1] and some clients have followed. This might change, see:\n         https://github.com/ethereum/go-ethereum/issues/2053\n        */\n        if (v \u003c 27) {\n            v += 27;\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (false, address(0));\n        }\n        return safer_ecrecover(_hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n}\n// \u003c/provableAPI\u003e"}}