{"dmex-oracle.sol":{"content":"pragma solidity ^0.4.25;\n\nimport \"./provableAPI_0.4.25.sol\";\n\n/* Interface for the DMEX base contract */\ncontract DMEX {\n\n\tfunction closeFuturesContract (bytes32 futuresContract, uint256 price) returns (bool);\n\tfunction getContractExpiration (bytes32 futuresContractHash) returns (uint256);\n\tfunction getContractClosed (bytes32 futuresContractHash) returns (bool);\n\tfunction getContractPriceUrl (bytes32 futuresContractHash) returns (string);\n\tfunction getContractPricePath (bytes32 futuresContractHash) returns (string);\n    function getAssetDecimals (bytes32 futuresContractHash) returns (uint256);\n\n    function recordLatestAssetPrice(bytes32 futuresContractHash, uint256 price);\n    function setClosingPrice (bytes32 futuresContractHash, uint256 price) returns (bool);\n}\n\n// The DMEX Futures Contract\ncontract DMEX_Oracle is usingProvable {\n\n\taddress public DMEX_contract;\n\taddress public owner; // holds the address of the contract owner\n\n    mapping (bytes32 =\u003e bytes32)            public close_queries;       // mapping of pending oracle close contract queries (queryId =\u003e futuresContractHash)\n\tmapping (bytes32 =\u003e bytes32)            public price_queries;         // mapping of pending oracle price queries (queryId =\u003e futuresContractHash)\n\tmapping (address =\u003e bool) \t\t\t\tpublic admins;              // mapping of admin addresses\n\n\n\tevent LogOracleRequest(bytes32 indexed queryId, bytes32 indexed futuresContractHash, uint8 route, string priceUrl, string pricePath);\n    event LogOracleCallback(bytes32 indexed queryId, bytes32 indexed futuresContractHash, uint8 route,  string result);\n    event FuturesContractClosed(bytes32 indexed futuresContract, uint256 closingPrice);\n    event AssetPriceUpdated(bytes32 indexed futuresContract, uint256 price);\n    event LogUint(uint8 id, uint256 value);\n\n    // Event fired when the owner of the contract is changed\n    event SetOwner(address indexed previousOwner, address indexed newOwner);\n\n    function assert(bool assertion) pure {\n\n        if (!assertion) {\n            throw;\n        }\n    }\n\n    // Safe Multiply Function - prevents integer overflow\n    function safeMul(uint a, uint b) pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    // Safe Subtraction Function - prevents integer overflow\n    function safeSub(uint a, uint b) pure returns (uint) {\n        assert(b \u003c= a);\n        return a - b;\n    }\n\n    // Safe Addition Function - prevents integer overflow\n    function safeAdd(uint a, uint b) pure returns (uint) {\n        uint c = a + b;\n        assert(c\u003e=a \u0026\u0026 c\u003e=b);\n        return c;\n    }\n\n    // Allows only the owner of the contract to execute the function\n    modifier onlyOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    // Changes the owner of the contract\n    function setOwner(address newOwner) onlyOwner {\n        emit SetOwner(owner, newOwner);\n        owner = newOwner;\n    }\n\n    // Adds or disables an admin account\n    function setAdmin(address admin, bool isAdmin) onlyOwner {\n        admins[admin] = isAdmin;\n    }\n\n    function setDmexContract(address DMEX_contract_)\n    {\n    \tDMEX_contract = DMEX_contract_;\n    }\n\n    // Allows for admins only to call the function\n    modifier onlyAdmin {\n        if (msg.sender != owner \u0026\u0026 !admins[msg.sender]) throw;\n        _;\n    }\n\n\n\t// Constructor function, initializes the contract and sets the core variables\n    function DMEX_Oracle() {\n    \towner = msg.sender;\n    }\n\n    function deposit() payable {\n\n    }\n\n    function withdraw(uint256 amount) onlyOwner\n    {\n    \tmsg.sender.send(amount);\n    }\n\n\tfunction closeFuturesContract (bytes32 futuresContractHash, uint256 gasPrice, uint256 gasLimit) onlyAdmin payable\n    {\n        if (DMEX(DMEX_contract).getContractExpiration(futuresContractHash) == 0) revert(); // contract not found\n        if (DMEX(DMEX_contract).getContractClosed(futuresContractHash) == true) revert(); // contract already closed\n\n        closeContractWithOraclePrice(futuresContractHash, gasPrice, gasLimit);\n    }\n\n    function closeContractWithOraclePrice(bytes32 futuresContractHash, uint256 gasPrice, uint256 gasLimit) private {\n        string memory priceUrl = DMEX(DMEX_contract).getContractPriceUrl(futuresContractHash); // futuresAssets[DMEX(DMEX_contract).futuresContracts[futuresContractHash].asset].priceUrl;\n        string memory path = DMEX(DMEX_contract).getContractPricePath(futuresContractHash); //  futuresAssets[DMEX(DMEX_contract).futuresContracts[futuresContractHash].asset].pricePath;\n\n        provable_setCustomGasPrice(gasPrice);\n\n        bytes32 queryId = provable_query(\"URL\",strConcat(\"json(\", priceUrl, \").\",path), gasLimit);\n        close_queries[queryId] = futuresContractHash;\n        emit LogOracleRequest(queryId, futuresContractHash, 0, priceUrl, path);\n\n    }\n\n    function queryPrice (bytes32 futuresContractHash, uint256 gasPrice, uint256 gasLimit) onlyAdmin payable\n    {\n        if (DMEX(DMEX_contract).getContractExpiration(futuresContractHash) == 0) revert(); // contract not found\n        if (DMEX(DMEX_contract).getContractClosed(futuresContractHash) == true) revert(); // contract already closed\n\n        recordAssetPriceWithOracle(futuresContractHash, gasPrice, gasLimit);\n    }\n\n    function recordAssetPriceWithOracle(bytes32 futuresContractHash, uint256 gasPrice, uint256 gasLimit) private {\n        string memory priceUrl = DMEX(DMEX_contract).getContractPriceUrl(futuresContractHash); // futuresAssets[DMEX(DMEX_contract).futuresContracts[futuresContractHash].asset].priceUrl;\n        string memory path = DMEX(DMEX_contract).getContractPricePath(futuresContractHash); //  futuresAssets[DMEX(DMEX_contract).futuresContracts[futuresContractHash].asset].pricePath;\n\n        provable_setCustomGasPrice(gasPrice);\n\n        bytes32 queryId = provable_query(\"URL\",strConcat(\"json(\", priceUrl, \").\",path), gasLimit);\n        price_queries[queryId] = futuresContractHash;\n        emit LogOracleRequest(queryId, futuresContractHash, 1, priceUrl, path);\n\n    }\n\n    // Receives price from the oracle\n    function __callback(bytes32 myid, string result) {\n        if (msg.sender != provable_cbAddress()) revert();\n        if (close_queries[myid] == \"\" \u0026\u0026 price_queries[myid] == \"\") revert();\n\n        uint8 route;\n        bytes32 futuresContractHash;\n        bytes32 empty;\n\n        if (close_queries[myid] != \"\")\n        {\n            route = 0;\n        }\n        else if (price_queries[myid] != \"\")\n        {\n            route = 1;\n        }\n        else\n        {\n            revert();\n        }\n\n        if (route == 0)\n        {\n            futuresContractHash = close_queries[myid]; \n        }\n        else\n        {\n            futuresContractHash = price_queries[myid];\n        }\n        \n\n        emit LogOracleCallback(myid, futuresContractHash, route,  result);\n\n        uint256 decimals = DMEX(DMEX_contract).getAssetDecimals(futuresContractHash);\n        uint256 remainingDecimals = 8 - decimals;\n\n        uint256 price = safeMul(parseInt(result, decimals), 10**remainingDecimals);\n\n        if (route == 0)\n        {\n            closeFuturesContractInternal(futuresContractHash, price);\n        }\n        else\n        {\n            recordAssetPriceInternal(futuresContractHash, price);\n        }\n    }\n\n    function recordAssetPriceInternal(bytes32 futuresContract, uint256 price) private returns (bool)\n    {        \n        DMEX(DMEX_contract).recordLatestAssetPrice(futuresContract, price); \n\n        emit AssetPriceUpdated(futuresContract, price);\n    } \n\n    function closeFuturesContractInternal(bytes32 futuresContract, uint256 price) private returns (bool)\n    {\n        uint256 expirationBlock = DMEX(DMEX_contract).getContractExpiration(futuresContract);\n\n        if (expirationBlock == 0 || expirationBlock \u003e block.number)  return false; // contract not found\n        if (DMEX(DMEX_contract).getContractClosed(futuresContract) == true)  return false; // contract already closed\n        \n        DMEX(DMEX_contract).setClosingPrice(futuresContract, price); \n\n        emit FuturesContractClosed(futuresContract, price);\n    }  \n\n}\n"},"provableAPI_0.4.25.sol":{"content":"// \u003cprovableAPI\u003e\n// Release targetted at solc 0.4.25 to silence compiler warning/error messages, compatible down to 0.4.22\n\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016-2019 Oraclize LTD\nCopyright (c) 2019 Provable Things Limited\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\npragma solidity \u003e= 0.4.22 \u003c 0.5;// Incompatible compiler version... please select one stated within pragma solidity or use different provableAPI version\n\ncontract ProvableI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) external payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n    function getPrice(string _datasource) public returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n    function setProofType(byte _proofType) external;\n    function setCustomGasPrice(uint _gasPrice) external;\n    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n}\n\ncontract OracleAddrResolverI {\n    function getAddress() public returns (address _addr);\n}\n\n/*\nBegin solidity-cborutils\n\nhttps://github.com/smartcontractkit/solidity-cborutils\n\nMIT License\n\nCopyright (c) 2018 SmartContract ChainLink, Ltd.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n\nlibrary Buffer {\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    function init(buffer memory buf, uint _capacity) internal pure {\n        uint capacity = _capacity;\n        if(capacity % 32 != 0) capacity += 32 - (capacity % 32);\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            mstore(0x40, add(ptr, capacity))\n        }\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    function max(uint a, uint b) private pure returns(uint) {\n        if(a \u003e b) {\n            return a;\n        }\n        return b;\n    }\n\n    /**\n     * @dev Appends a byte array to the end of the buffer. Resizes if doing so\n     *      would exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, bytes data) internal pure returns(buffer memory) {\n        if(data.length + buf.buf.length \u003e buf.capacity) {\n            resize(buf, max(buf.capacity, data.length) * 2);\n        }\n\n        uint dest;\n        uint src;\n        uint len = data.length;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + buffer length + sizeof(buffer length)\n            dest := add(add(bufptr, buflen), 32)\n            // Update buffer length\n            mstore(bufptr, add(buflen, mload(data)))\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for(; len \u003e= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n\n        return buf;\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function append(buffer memory buf, uint8 data) internal pure {\n        if(buf.buf.length + 1 \u003e buf.capacity) {\n            resize(buf, buf.capacity * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length)\n            let dest := add(add(bufptr, buflen), 32)\n            mstore8(dest, data)\n            // Update buffer length\n            mstore(bufptr, add(buflen, 1))\n        }\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     * exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        if(len + buf.buf.length \u003e buf.capacity) {\n            resize(buf, max(buf.capacity, len) * 2);\n        }\n\n        uint mask = 256 ** len - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Address = buffer address + buffer length + sizeof(buffer length) + len\n            let dest := add(add(bufptr, buflen), len)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length\n            mstore(bufptr, add(buflen, len))\n        }\n        return buf;\n    }\n}\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    function encodeType(Buffer.buffer memory buf, uint8 major, uint value) private pure {\n        if(value \u003c= 23) {\n            buf.append(uint8((major \u003c\u003c 5) | value));\n        } else if(value \u003c= 0xFF) {\n            buf.append(uint8((major \u003c\u003c 5) | 24));\n            buf.appendInt(value, 1);\n        } else if(value \u003c= 0xFFFF) {\n            buf.append(uint8((major \u003c\u003c 5) | 25));\n            buf.appendInt(value, 2);\n        } else if(value \u003c= 0xFFFFFFFF) {\n            buf.append(uint8((major \u003c\u003c 5) | 26));\n            buf.appendInt(value, 4);\n        } else if(value \u003c= 0xFFFFFFFFFFFFFFFF) {\n            buf.append(uint8((major \u003c\u003c 5) | 27));\n            buf.appendInt(value, 8);\n        }\n    }\n\n    function encodeIndefiniteLengthType(Buffer.buffer memory buf, uint8 major) private pure {\n        buf.append(uint8((major \u003c\u003c 5) | 31));\n    }\n\n    function encodeUInt(Buffer.buffer memory buf, uint value) internal pure {\n        encodeType(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function encodeInt(Buffer.buffer memory buf, int value) internal pure {\n        if(value \u003e= 0) {\n            encodeType(buf, MAJOR_TYPE_INT, uint(value));\n        } else {\n            encodeType(buf, MAJOR_TYPE_NEGATIVE_INT, uint(-1 - value));\n        }\n    }\n\n    function encodeBytes(Buffer.buffer memory buf, bytes value) internal pure {\n        encodeType(buf, MAJOR_TYPE_BYTES, value.length);\n        buf.append(value);\n    }\n\n    function encodeString(Buffer.buffer memory buf, string value) internal pure {\n        encodeType(buf, MAJOR_TYPE_STRING, bytes(value).length);\n        buf.append(bytes(value));\n    }\n\n    function startArray(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n    }\n\n    function startMap(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n    }\n\n    function endSequence(Buffer.buffer memory buf) internal pure {\n        encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n    }\n}\n\n/*\nEnd solidity-cborutils\n */\n\ncontract usingProvable {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Android = 0x40;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OracleAddrResolverI OAR;\n\n    ProvableI provable;\n    modifier provableAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n            provable_setNetwork(networkID_auto);\n\n        if(address(provable) != OAR.getAddress())\n            provable = ProvableI(OAR.getAddress());\n\n        _;\n    }\n    modifier coupon(string code){\n        provable = ProvableI(OAR.getAddress());\n        _;\n    }\n\n    function provable_setNetwork(uint8 networkID) internal returns(bool){\n      return provable_setNetwork();\n      networkID; // silence the warning and remain backwards compatible\n    }\n    function provable_setNetwork() internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)\u003e0){ //mainnet\n            OAR = OracleAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            provable_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)\u003e0){ //ropsten testnet\n            OAR = OracleAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            provable_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)\u003e0){ //kovan testnet\n            OAR = OracleAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            provable_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)\u003e0){ //rinkeby testnet\n            OAR = OracleAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            provable_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41)\u003e0){ //goerli testnet\n            OAR = OracleAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);\n            provable_setNetworkName(\"eth_goerli\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)\u003e0){ //ethereum-bridge\n            OAR = OracleAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)\u003e0){ //ether.camp ide\n            OAR = OracleAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)\u003e0){ //browser-solidity\n            OAR = OracleAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @dev The following `__callback` functions are just placeholders ideally\n     *      meant to be defined in child contract when proofs are used.\n     *      The function bodies simply silence compiler warnings.\n     */\n    function __callback(bytes32 myid, string result) public {\n        __callback(myid, result, new bytes(0));\n    }\n\n    function __callback(bytes32 myid, string result, bytes proof) public {\n      return;\n      myid; result; proof;\n      provable_randomDS_args[bytes32(0)] = bytes32(0);\n    }\n\n    function provable_getPrice(string datasource) provableAPI internal returns (uint){\n        return provable.getPrice(datasource);\n    }\n\n    function provable_getPrice(string datasource, uint gaslimit) provableAPI internal returns (uint){\n        return provable.getPrice(datasource, gaslimit);\n    }\n\n    function provable_query(string datasource, string arg) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return provable.query.value(price)(0, datasource, arg);\n    }\n    function provable_query(uint timestamp, string datasource, string arg) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return provable.query.value(price)(timestamp, datasource, arg);\n    }\n    function provable_query(uint timestamp, string datasource, string arg, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return provable.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function provable_query(string datasource, string arg, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return provable.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function provable_query(string datasource, string arg1, string arg2) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return provable.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function provable_query(uint timestamp, string datasource, string arg1, string arg2) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return provable.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function provable_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return provable.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function provable_query(string datasource, string arg1, string arg2, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return provable.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function provable_query(string datasource, string[] argN) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return provable.queryN.value(price)(0, datasource, args);\n    }\n    function provable_query(uint timestamp, string datasource, string[] argN) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return provable.queryN.value(price)(timestamp, datasource, args);\n    }\n    function provable_query(uint timestamp, string datasource, string[] argN, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return provable.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function provable_query(string datasource, string[] argN, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return provable.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function provable_query(string datasource, string[1] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[1] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[1] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[1] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n\n    function provable_query(string datasource, string[2] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[2] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[2] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[2] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[3] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[3] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[3] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[3] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n\n    function provable_query(string datasource, string[4] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[4] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[4] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[4] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[5] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[5] args) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, string[5] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, string[5] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[] argN) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return provable.queryN.value(price)(0, datasource, args);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[] argN) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource);\n        if (price \u003e 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return provable.queryN.value(price)(timestamp, datasource, args);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return provable.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function provable_query(string datasource, bytes[] argN, uint gaslimit) provableAPI internal returns (bytes32 id){\n        uint price = provable.getPrice(datasource, gaslimit);\n        if (price \u003e 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return provable.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function provable_query(string datasource, bytes[1] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[1] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[1] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n\n    function provable_query(string datasource, bytes[2] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[2] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[2] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[3] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[3] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[3] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n\n    function provable_query(string datasource, bytes[4] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[4] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[4] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[5] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[5] args) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(timestamp, datasource, dynargs);\n    }\n    function provable_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function provable_query(string datasource, bytes[5] args, uint gaslimit) provableAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return provable_query(datasource, dynargs, gaslimit);\n    }\n\n    function provable_cbAddress() provableAPI internal returns (address){\n        return provable.cbAddress();\n    }\n    function provable_setProof(byte proofP) provableAPI internal {\n        return provable.setProofType(proofP);\n    }\n    function provable_setCustomGasPrice(uint gasPrice) provableAPI internal {\n        return provable.setCustomGasPrice(gasPrice);\n    }\n\n    function provable_randomDS_getSessionPubKeyHash() provableAPI internal returns (bytes32){\n        return provable.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) view internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function parseAddr(string _a) internal pure returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i\u003c2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 \u003e= 97)\u0026\u0026(b1 \u003c= 102)) b1 -= 87;\n            else if ((b1 \u003e= 65)\u0026\u0026(b1 \u003c= 70)) b1 -= 55;\n            else if ((b1 \u003e= 48)\u0026\u0026(b1 \u003c= 57)) b1 -= 48;\n            if ((b2 \u003e= 97)\u0026\u0026(b2 \u003c= 102)) b2 -= 87;\n            else if ((b2 \u003e= 65)\u0026\u0026(b2 \u003c= 70)) b2 -= 55;\n            else if ((b2 \u003e= 48)\u0026\u0026(b2 \u003c= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal pure returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length \u003c minLength) minLength = b.length;\n        for (uint i = 0; i \u003c minLength; i ++)\n            if (a[i] \u003c b[i])\n                return -1;\n            else if (a[i] \u003e b[i])\n                return 1;\n        if (a.length \u003c b.length)\n            return -1;\n        else if (a.length \u003e b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length \u003c 1 || n.length \u003c 1 || (n.length \u003e h.length))\n            return -1;\n        else if(h.length \u003e (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i \u003c h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex \u003c n.length \u0026\u0026 (i + subindex) \u003c h.length \u0026\u0026 h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i \u003c _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i \u003c _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i \u003c _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i \u003c _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i \u003c _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal pure returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i\u003cbresult.length; i++){\n            if ((bresult[i] \u003e= 48)\u0026\u0026(bresult[i] \u003c= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b \u003e 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal pure returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n\n    using CBOR for Buffer.buffer;\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i \u003c arr.length; i++) {\n            buf.encodeString(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n        safeMemoryCleaner();\n        Buffer.buffer memory buf;\n        Buffer.init(buf, 1024);\n        buf.startArray();\n        for (uint i = 0; i \u003c arr.length; i++) {\n            buf.encodeBytes(arr[i]);\n        }\n        buf.endSequence();\n        return buf.buf;\n    }\n\n    string provable_network_name;\n    function provable_setNetworkName(string _network_name) internal {\n        provable_network_name = _network_name;\n    }\n\n    function provable_getNetworkName() internal view returns (string) {\n        return provable_network_name;\n    }\n\n    function provable_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        require((_nbytes \u003e 0) \u0026\u0026 (_nbytes \u003c= 32));\n        // Convert from seconds to ledger timer ticks\n        _delay *= 10;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = provable_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            // the following variables can be relaxed\n            // check relaxed random contract under ethereum-examples repo\n            // for an idea on how to override and replace comit hash vars\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes memory delay = new bytes(32);\n        assembly {\n            mstore(add(delay, 0x20), _delay)\n        }\n\n        bytes memory delay_bytes8 = new bytes(8);\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n        bytes32 queryId = provable_query(\"random\", args, _customGasLimit);\n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        assembly {\n            let x := mload(add(delay_bytes8, 0x20))\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n        }\n\n        provable_randomDS_setCommitment(queryId, keccak256(abi.encodePacked(delay_bytes8_left, args[1], sha256(args[0]), args[2])));\n        return queryId;\n    }\n\n    function provable_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        provable_randomDS_args[queryId] = commitment;\n    }\n\n    mapping(bytes32=\u003ebytes32) provable_randomDS_args;\n    mapping(bytes32=\u003ebool) provable_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n\n        bytes32 sigr;\n        bytes32 sigs;\n\n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(keccak256(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(keccak256(pubkey)) == signer);\n        }\n    }\n\n    function provable_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = byte(1); //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n        if (sigok == false) return false;\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n        return sigok;\n    }\n\n    modifier provable_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match \u0027LP\\x01\u0027 (Ledger Proof version 1)\n        require((_proof[0] == \"L\") \u0026\u0026 (_proof[1] == \"P\") \u0026\u0026 (_proof[2] == 1));\n\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\n        require(proofVerified);\n\n        _;\n    }\n\n    function provable_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match \u0027LP\\x01\u0027 (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n        bool proofVerified = provable_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), provable_getNetworkName());\n        if (proofVerified == false) return 2;\n\n        return 0;\n    }\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n        bool match_ = true;\n\n        require(prefix.length == n_random_bytes);\n\n        for (uint256 i=0; i\u003c n_random_bytes; i++) {\n            if (content[i] != prefix[i]) match_ = false;\n        }\n\n        return match_;\n    }\n\n    function provable_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        if (!(keccak256(keyhash) == keccak256(abi.encodePacked(sha256(abi.encodePacked(context_name, queryId)))))) return false;\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if \u0027result\u0027 is the prefix of sha256(sig1)\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (provable_randomDS_args[queryId] == keccak256(abi.encodePacked(commitmentSlice1, sessionPubkeyHash))){ //unonce, nbytes and sessionKeyHash match\n            delete provable_randomDS_args[queryId];\n        } else return false;\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n        // verify if sessionPubkeyHash was verified already, if not.. let\u0027s do it!\n        if (provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = provable_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n\n        return provable_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n        uint minLength = length + toOffset;\n\n        // Buffer too small\n        require(to.length \u003e= minLength); // Should be a better way?\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i \u003c (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        return to;\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity\u0027s ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don\u0027t update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can\u0027t access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // \u0027mload\u0027 will pad with zeroes if we overread.\n            // There is no \u0027mload8\u0027 to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // \u0027byte\u0027 is not working due to the Solidity parser, so lets\n            // use the second best option, \u0027and\u0027\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v \u003c 27)\n          v += 27;\n\n        if (v != 27 \u0026\u0026 v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function safeMemoryCleaner() internal pure {\n        assembly {\n            let fmem := mload(0x40)\n            codecopy(fmem, codesize, sub(msize, fmem))\n        }\n    }\n\n}\n// \u003c/provableAPI\u003e\n"}}